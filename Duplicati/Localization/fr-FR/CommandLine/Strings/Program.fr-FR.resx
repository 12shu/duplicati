<?xml version="1.0" encoding="utf-8" standalone="no"?>
<root>
  <schema id="root" xmlns="http://www.w3.org/2001/XMLSchema">
    <import namespace="http://www.w3.org/XML/1998/namespace"></import>
    <element name="root" NS2:IsDataSet="true" xmlns:NS2="urn:schemas-microsoft-com:xml-msdata">
      <complexType>
        <choice maxOccurs="unbounded">
          <element name="metadata">
            <complexType>
              <sequence>
                <element name="value" type="xsd:string" minOccurs="0"></element>
              </sequence>
              <attribute name="name" use="required" type="xsd:string"></attribute>
              <attribute name="type" type="xsd:string"></attribute>
              <attribute name="mimetype" type="xsd:string"></attribute>
              <attribute ref="xml:space"></attribute>
            </complexType>
          </element>
          <element name="assembly">
            <complexType>
              <attribute name="alias" type="xsd:string"></attribute>
              <attribute name="name" type="xsd:string"></attribute>
            </complexType>
          </element>
          <element name="data">
            <complexType>
              <sequence>
                <element name="value" type="xsd:string" minOccurs="0" NS2:Ordinal="1"></element>
                <element name="comment" type="xsd:string" minOccurs="0" NS2:Ordinal="2"></element>
              </sequence>
              <attribute name="name" type="xsd:string" use="required" NS2:Ordinal="1"></attribute>
              <attribute name="type" type="xsd:string" NS2:Ordinal="3"></attribute>
              <attribute name="mimetype" type="xsd:string" NS2:Ordinal="4"></attribute>
              <attribute ref="xml:space"></attribute>
            </complexType>
          </element>
          <element name="resheader">
            <complexType>
              <sequence>
                <element name="value" type="xsd:string" minOccurs="0" NS2:Ordinal="1"></element>
              </sequence>
              <attribute name="name" type="xsd:string" use="required"></attribute>
            </complexType>
          </element>
        </choice>
      </complexType>
    </element>
  </schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddedFoldersHeader">
    <value>Répertoires ajoutés</value>
  </data>
  <data name="CollectionStatusHeader">
    <value>Trouvé {0} chaines de sauvegardes dans le répertoire distant  Type\tTime\t\t\tVolumes\tSize</value>
  </data>
  <data name="CollectionStatusLineFull">
    <value>Full\t{0}\t{1}\t{2}</value>
  </data>
  <data name="CollectionStatusLineInc">
    <value> Inc\t{0}\t{1}\t{2}</value>
  </data>
  <data name="ControlFilesHeader">
    <value>Fichiers de contrôle</value>
  </data>
  <data name="DeletedFilesHeader">
    <value>Fichiers supprimés</value>
  </data>
  <data name="DeletedFoldersHeader">
    <value>Répertoires supprimés</value>
  </data>
  <data name="DuplicatiOptionsHeader">
    <value>Options de Duplicati:</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"></assembly>
  <data name="ExampleLinux" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\ExampleLinux.txt;System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;Windows-1252</value>
  </data>
  <data name="ExampleWindows" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\ExampleWindows.txt;System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;Windows-1252</value>
  </data>
  <data name="GenericModulesHeader">
    <value>Modules standards supportés:</value>
  </data>
  <data name="IntegerParseError">
    <value>Impossible de convertir "{0}" en un nombre</value>
  </data>
  <data name="InternalOptionUsedError">
    <value>L'option --{0} à été spécifiée, mais celle-ci est réservée à un usage interne et ne doit pas être spécifiée en ligne de commande</value>
  </data>
  <data name="ModifiedFilesHeader">
    <value>Fichiers modifiés</value>
  </data>
  <data name="ModuleIsLoadedAutomatically">
    <value>Le module est automatiquement chargé, utilisez --disable-module pour empècher ca</value>
  </data>
  <data name="ModuleIsNotLoadedAutomatically">
    <value>Le module n'est pas automatiquement chargé, utilisez --enable-module pour le charger</value>
  </data>
  <data name="NewFilesHeader">
    <value>Nouveau fichiers</value>
  </data>
  <data name="NewOrModifiedFilesHeader">
    <value>Nouveau fichiers/modifiés</value>
  </data>
  <data name="String1">
    <value></value>
    <comment>There is a space to the left, which makes the output look nicer</comment>
  </data>
  <data name="SupportedBackendsHeader">
    <value>Destinations supportées:</value>
  </data>
  <data name="SupportedCompressionModulesHeader">
    <value>Modules de compression supportés:</value>
  </data>
  <data name="SupportedEncryptionModulesHeader">
    <value>Modules de cryptages supportés:</value>
  </data>
  <data name="SupportedOptionsHeader">
    <value>Options supportées:</value>
  </data>
  <data name="TimeParseError">
    <value>Impossible de convertir "{0}" en une période temporelle: {1}</value>
  </data>
  <data name="UnhandledException">
    <value>Une erreur est apparue: {0}</value>
  </data>
  <data name="UnhandledInnerException">
    <value>Le message interne est: {0}</value>
  </data>
  <data name="Usage" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Usage.txt;System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;Windows-1252</value>
  </data>
  <data name="WrongNumberOfArgumentsError">
    <value>Nombre d'arguments incorrects</value>
  </data>
  <data name="FolderCreatedMessage" xml:space="preserve">
    <value>The folder {0} was created</value>
  </data>
  <data name="FindLastVersionHeader" xml:space="preserve">
    <value>Backuptime\t\tFilename</value>
  </data>
  <data name="FindLastVersionEntry" xml:space="preserve">
    <value>{0}\t{1}</value>
  </data>
  <data name="FileEntryNotFound" xml:space="preserve">
    <value>&lt; not found &gt;</value>
  </data>
  <data name="VerificationErrorHeader" xml:space="preserve">
    <value>Reported error messages:</value>
  </data>
  <data name="VerificationCompleted" xml:space="preserve">
    <value>Verification completed, summary:
Manifest files verified: {0}
Signature files verified: {1}
Content files verified: {2}
Errors: {3}</value>
  </data>
  <data name="UsageExampleWindows" xml:space="preserve">
    <value>Duplicati.CommandLine C:\Documents\Files ftp://host/folder --exclude=\file.txt

  In this example the file "C:\Documents\Files\file.txt" is excluded.</value>
  </data>
  <data name="UsageExampleLinux" xml:space="preserve">
    <value>Duplicati.CommandLine /home/user/ ftp://host/folder --exclude=/file.txt

  In this example the file "/home/user/file.txt" is excluded.</value>
  </data>
  <data name="ProgramUsage" xml:space="preserve">
    <value>********** Duplicati v. {0} **********

Usage:

 Backup (make a full or incremental backup):
  Duplicati.CommandLine [full] [options] &lt;sourcefolder&gt; &lt;backend&gt;

 Restore (restore all or some files):
  Duplicati.CommandLine [options] &lt;backend&gt; &lt;destinationfolder&gt;

 Cleanup (remove partial and unused files):
  Duplicati.CommandLine cleanup [options] &lt;backend&gt;

 List files:
  Duplicati.CommandLine list [options] &lt;backend&gt;

 List backup sets:
  Duplicati.CommandLine collection-status [options] &lt;backend&gt;

 List content files (files that can be restored):
  Duplicati.CommandLine list-current-files [options] &lt;backend&gt;

 List source folders (folders backed up from):
  Duplicati.CommandLine list-source-folders [options] &lt;backend&gt;

 List signature files (files in a single backup volume set):
  Duplicati.CommandLine list-actual-signature-files [options] &lt;backend&gt;

 Find the last version of a file:
  Duplicati.CommandLine find-last-version [options] --file-to-restore=&lt;files to find&gt; &lt;backend&gt;

 Verify backup integrity:
  Duplicati.CommandLine verify &lt;backend&gt; --verification-level=manifest|signatures|full
  
 Purge signature cache:
  Duplicati.CommandLine purge-signature-cache [options]

 Delete old backups:
  Duplicati.CommandLine delete-all-but-n-full &lt;number of full backups to keep&gt; [options] &lt;backend&gt;
  Duplicati.CommandLine delete-older-than &lt;max allowed age&gt; [options] &lt;backend&gt;

 Create folder (usually done automatically):
  Duplicati.CommandLine create-folder [options] &lt;backend&gt;

 A &lt;backend&gt; is identified by an url like ftp://host/ or ssh://server/.
 Using this system, Duplicati can detect if you want to backup or restore.
 The cleanup and delete commands do not delete files, unless the --force option is specified, so you may examine what files are affected, before actually deleting the files.
 The cleanup command should not be used unless a backup was interrupted and has left partial files. Duplicati will inform you if this happens.
 The delete command can be used to remove backup sets when newer backups are present.

Option types:
 The following option types are available:
  Integer: a numerical value
  Boolean: a truth value, --force and --force=true are equivalent. --force=false is the opposite
  Timespan: a time in the special time format (explained below)
  Size: a size like 5mb or 200kb
  Enumeration: any of the listed values
  Path: the path to a folder or file
  String: any other type
  
Times:
 Duplicati uses the time system from duplicity, where times may be presented as:
  1: the string "now", indicating the current time
  2: the number of seconds after epoch, eg: 123456890
  3: a string like "2009-03-26T08:30:00+01:00"
  4: an interval string, using Y, M, W, D, h, m, s for Year, Month, Week, Day, hour, minute or second, eg: "1M4D" for one month and four days, or "5m" for five minutes.

Filters:
 Duplicati uses filters to include and exclude files.
  Duplicati uses a "first-touch" filter where the first rule that matches a file determines if the file is included or excluded. Internally Duplicati uses regular expression filters, but supports filters in the form of filename globbing. The order of the commandline arguments also determine what order they are applied in. An example:
    --include=*.txt --exclude=*\Thumbs.db --include=*

  Even though the last filter includes everything, no files named "Thumbs.db" are included because they match the exclude rule before the include rule. Paths are evaluated in full, and as paths that are relative to folder being backed up, but including a leading slash. An example:

{1}
  If a folder is excluded, files in that folder are always excluded, even if there are filters that include files in that folder. If a folder is included with a wildcard at the end, all files are included, if the folder is included without a wildcard, files may be excluded or included with extra rules.</value>
  </data>
  <data name="ProgramUsageVerify" xml:space="preserve">
    <value>Verify backup integrity:
  Duplicati.CommandLine verify &lt;backend&gt; --verification-level=manifest|signatures|full</value>
  </data>
  <data name="ProgramUsageTimes" xml:space="preserve">
    <value>Times:
 Duplicati uses the time system from duplicity, where times may be presented as:
  1: the string "now", indicating the current time
  2: the number of seconds after epoch, eg: 123456890
  3: a string like "2009-03-26T08:30:00+01:00"
  4: an interval string, using Y, M, W, D, h, m, s for Year, Month, Week, Day, hour, minute or second, eg: "1M4D" for one month and four days, or "5m" for five minutes.</value>
  </data>
  <data name="ProgramUsageRestore" xml:space="preserve">
    <value>Restore (restore all or some files):
  Duplicati.CommandLine [options] &lt;backend&gt; &lt;destinationfolder&gt;</value>
  </data>
  <data name="ProgramUsagePurgeCache" xml:space="preserve">
    <value>Purge signature cache:
  Duplicati.CommandLine purge-signature-cache [options]</value>
  </data>
  <data name="ProgramUsageOptionTypes" xml:space="preserve">
    <value>Option types:
 The following option types are available:
  Integer: a numerical value
  Boolean: a truth value, --force and --force=true are equivalent. --force=false is the opposite
  Timespan: a time in the special time format (explained below)
  Size: a size like 5mb or 200kb
  Enumeration: any of the listed values
  Path: the path to a folder or file
  String: any other type</value>
  </data>
  <data name="ProgramUsageListSourceFolders" xml:space="preserve">
    <value>List source folders (folders backed up from):
  Duplicati.CommandLine list-source-folders [options] &lt;backend&gt;</value>
  </data>
  <data name="ProgramUsageListSignatureFiles" xml:space="preserve">
    <value>List signature files (files in a single backup volume set):
  Duplicati.CommandLine list-actual-signature-files [options] &lt;backend&gt;</value>
  </data>
  <data name="ProgramUsageListSets" xml:space="preserve">
    <value>List backup sets:
  Duplicati.CommandLine collection-status [options] &lt;backend&gt;</value>
  </data>
  <data name="ProgramUsageListFiles" xml:space="preserve">
    <value>List files:
  Duplicati.CommandLine list [options] &lt;backend&gt;</value>
  </data>
  <data name="ProgramUsageListContentFiles" xml:space="preserve">
    <value>List content files (files that can be restored):
  Duplicati.CommandLine list-current-files [options] &lt;backend&gt;</value>
  </data>
  <data name="ProgramUsageHeader" xml:space="preserve">
    <value>********** Duplicati v. {0} **********

Usage:</value>
  </data>
  <data name="ProgramUsageFindLastVersion" xml:space="preserve">
    <value>Find the last version of a file:
  Duplicati.CommandLine find-last-version [options] --file-to-restore=&lt;files to find&gt; &lt;backend&gt;</value>
  </data>
  <data name="ProgramUsageFilters" xml:space="preserve">
    <value>Filters:
 Duplicati uses filters to include and exclude files.
  Duplicati uses a "first-touch" filter where the first rule that matches a file determines if the file is included or excluded. Internally Duplicati uses regular expression filters, but supports filters in the form of filename globbing. The order of the commandline arguments also determine what order they are applied in. An example:
    --include=*.txt --exclude=*\Thumbs.db --include=*

  Even though the last filter includes everything, no files named "Thumbs.db" are included because they match the exclude rule before the include rule. Paths are evaluated in full, and as paths that are relative to folder being backed up, but including a leading slash. An example:

{0}
  If a folder is excluded, files in that folder are always excluded, even if there are filters that include files in that folder. If a folder is included with a wildcard at the end, all files are included, if the folder is included without a wildcard, files may be excluded or included with extra rules.</value>
  </data>
  <data name="ProgramUsageDeleteOld" xml:space="preserve">
    <value>Delete old backups:
  Duplicati.CommandLine delete-all-but-n-full &lt;number of full backups to keep&gt; [options] &lt;backend&gt;
  Duplicati.CommandLine delete-older-than &lt;max allowed age&gt; [options] &lt;backend&gt;</value>
  </data>
  <data name="ProgramUsageCreateFolders" xml:space="preserve">
    <value>Create folder (usually done automatically):
  Duplicati.CommandLine create-folder [options] &lt;backend&gt;</value>
  </data>
  <data name="ProgramUsageCleanup" xml:space="preserve">
    <value>Cleanup (remove partial and unused files):
  Duplicati.CommandLine cleanup [options] &lt;backend&gt;</value>
  </data>
  <data name="ProgramUsageBackup" xml:space="preserve">
    <value>Backup (make a full or incremental backup):
  Duplicati.CommandLine [full] [options] &lt;sourcefolder&gt; &lt;backend&gt;</value>
  </data>
  <data name="ProgramUsageBackend" xml:space="preserve">
    <value>A &lt;backend&gt; is identified by an url like ftp://host/ or ssh://server/.
 Using this system, Duplicati can detect if you want to backup or restore.
 The cleanup and delete commands do not delete files, unless the --force option is specified, so you may examine what files are affected, before actually deleting the files.
 The cleanup command should not be used unless a backup was interrupted and has left partial files. Duplicati will inform you if this happens.
 The delete command can be used to remove backup sets when newer backups are present.</value>
  </data>
</root>